apiVersion: v1
kind: ConfigMap
metadata:
  name: is-skeletons-detector
  namespace: default
data:
  detector: |-
    {
      "broker_uri": "amqp://rabbitmq.default",
      "zipkin_uri": "http://zipkin.default:9411",
      "resize": {
        "width": 432,
        "height": 368
      },
      "model": "MOBILENET_THIN",
      "resize_out_ratio": 4.0,
      "gpu_mem_allow_growth": true,
      "per_process_gpu_memory_fraction": 0.25,
      "period": 5
    }

---
apiVersion: extensions/v1beta1 
kind: Deployment
metadata:
  name: "is-skeletons-detector"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: is-skeletons-detector
    spec:
      containers:
        - name: is-skeletons-detector
          image: luizcarloscf/is-skeletons-detector:0.0.3
          command: ["is-skeletons-detector-stream"]
          args: ["/opt/is/options.json"]
          imagePullPolicy: Always
          ports:
            - name: web
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /metrics
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 30
          resources:
            limits:
              cpu: "1"
              memory: 1024Mi
              nvidia.com/gpu: 1
          volumeMounts:
            - name: options
              mountPath: /opt/options
      terminationGracePeriodSeconds: 1
      volumes:
      - name: options
        configMap:
          name: is-skeletons-detector
          items:
          - key: detector
            path: options.json
---
apiVersion: v1
kind: Service
metadata:
  name: is-skeletons-detector
  labels:
    app: is-skeletons-detector
spec:
  ports:
    - name: web
      port: 80
      targetPort: web
  selector:
    app: is-skeletons-detector

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: is-skeletons-detector
  labels:
    app: is-skeletons-detector
spec:
  selector:
    matchLabels:
      app: is-skeletons-detector
  endpoints:
    - port: web
      interval: 5s # scrape the endpoint every X seconds